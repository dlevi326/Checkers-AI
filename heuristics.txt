-------------------------------------------------------------
(1)
string targets[2];
	string enemies[2];

	if(turn==1){
		targets[0] = g.player1GameReg;
		targets[1] = g.player1GameKing;
		enemies[0] = g.player2GameReg;
		enemies[1] = g.player2GameKing;
	} 
	else{
		targets[0] = g.player2GameReg;
		targets[1] = g.player2GameKing;
		enemies[0] = g.player1GameReg;
		enemies[1] = g.player1GameKing;
	}

	// If turn=1, enemyReg=x
	// If turn=-1, enemyReg=0
	//cout<<"Turn: "<<turn<<" EnemyReg: "<<enemies[0]<<endl;

	int numKings = 0;
	int numReg = 0;
	int enemyReg = 0;
	int enemyKing = 0;

	for(int i=0;i<g.board.size();i++){
		for(int j=0;j<g.board[i].size();j++){
			if(g.board[i][j].type==targets[0]){
				numReg++;
			}
			else if(g.board[i][j].type==targets[1]){
				numKings++;
			}
			else if(g.board[i][j].type==enemies[0]){
				enemyReg++;
			}
			else if(g.board[i][j].type==enemies[1]){
				enemyKing++;
			}
		}
	}

	int heur = (4*numKings)+(1*numReg)-(1*enemyReg)-(4*enemyKing);
	/*cout<<"PRINTING BOARD"<<endl;
	cout << "\033[1;31mPrinting Board\033[0m\n";
	printBoard(g);
	cout<<"HEURISTIC IS: "<<heur<<endl;
	cout<<"NUM OWN KINGS: "<<numKings<<endl;
	cout<<"NUM OWN REG: "<<numReg<<endl;
	cout<<"NUM ENEMY KINGS: "<<enemyKing<<endl;
	cout<<"NUM ENEMY REG: "<<enemyReg<<endl;*/


	return heur;
-------------------------------------------------------------
(2)
    string targets[2];
	string enemies[2];

	if(turn==1){
		targets[0] = g.player1GameReg;
		targets[1] = g.player1GameKing;
		enemies[0] = g.player2GameReg;
		enemies[1] = g.player2GameKing;
	} 
	else{
		targets[0] = g.player2GameReg;
		targets[1] = g.player2GameKing;
		enemies[0] = g.player1GameReg;
		enemies[1] = g.player1GameKing;
	}


	int numKings = 0;
	int numReg = 0;
	int enemyReg = 0;
	int enemyKing = 0;

	for(int i=0;i<g.board.size();i++){
		for(int j=0;j<g.board[i].size();j++){
			if(g.board[i][j].type==targets[0]){
				numReg++;
			}
			else if(g.board[i][j].type==targets[1]){
				numKings++;
			}
			else if(g.board[i][j].type==enemies[0]){
				enemyReg++;
			}
			else if(g.board[i][j].type==enemies[1]){
				enemyKing++;
			}
		}
	}
	if(enemyReg+enemyKing==0){
		return 100000;
	}

	int heur = (1800*numKings)+(1000*numReg)-(1000*enemyReg)-(1800*enemyKing);
	
	return heur;
-------------------------------------------------------------
(3)
    string targets[2];
	string enemies[2];

	if(turn==1){
		targets[0] = g.player1GameReg;
		targets[1] = g.player1GameKing;
		enemies[0] = g.player2GameReg;
		enemies[1] = g.player2GameKing;
	} 
	else{
		targets[0] = g.player2GameReg;
		targets[1] = g.player2GameKing;
		enemies[0] = g.player1GameReg;
		enemies[1] = g.player1GameKing;
	}

	int numKings = 0;
	int numReg = 0;
	int enemyReg = 0;
	int enemyKing = 0;

	for(int i=0;i<g.board.size();i++){
		for(int j=0;j<g.board[i].size();j++){
			if(g.board[i][j].type==targets[0]){
				numReg++;
			}
			else if(g.board[i][j].type==targets[1]){
				numKings++;
			}
			else if(g.board[i][j].type==enemies[0]){
				enemyReg++;
			}
			else if(g.board[i][j].type==enemies[1]){
				enemyKing++;
			}
		}
	}

	if(numReg+numKings==0){
		return -100000;
	}
	if(enemyReg+enemyKing==0){
		return 100000;
	}

	int heur = (1800*numKings)+(1000*numReg)-(1000*enemyReg)-(1800*enemyKing);
	/*cout<<"PRINTING BOARD"<<endl;
	cout << "\033[1;31mPrinting Board\033[0m\n";
	printBoard(g);
	cout<<"HEURISTIC IS: "<<heur<<endl;
	cout<<"NUM OWN KINGS: "<<numKings<<endl;
	cout<<"NUM OWN REG: "<<numReg<<endl;
	cout<<"NUM ENEMY KINGS: "<<enemyKing<<endl;
	cout<<"NUM ENEMY REG: "<<enemyReg<<endl;*/


	return heur;
-------------------------------------------------------------
(4)
    string targets[2];
	string enemies[2];
	int backRow;

	if(turn==1){
		targets[0] = g.player1GameReg;
		targets[1] = g.player1GameKing;
		enemies[0] = g.player2GameReg;
		enemies[1] = g.player2GameKing;
		backRow=0;
	} 
	else{
		targets[0] = g.player2GameReg;
		targets[1] = g.player2GameKing;
		enemies[0] = g.player1GameReg;
		enemies[1] = g.player1GameKing;
		backRow=7;
	}

	int play2count = 0;
    int play1count = 0;
    double play1val=0;
    double play2val=0;
    double retval;

	for(int i=0;i<g.board.size();i++){
		for(int j=0;j<g.board[i].size();j++){
			if(g.board[i][j].type==targets[0] || g.board[i][j].type==targets[1]){
				play1count++;
				play1val++;

				if(g.board[i][j].type==targets[1]){
					play1val+=0.75;
				}

				if(j!=7 && j!=0 && i!=0 && i!=7){

					if( ( (g.board[i-1][j-1].type==g.blankGame) && (g.board[i+1][j+1].type!=targets[0] && g.board[i+1][j+1].type!=targets[1]) )
						|| ( (g.board[i-1][j+1].type==g.blankGame) && (g.board[i+1][j-1].type!=targets[0] && g.board[i+1][j-1].type!=targets[1]) ) ){

						// Write code for 1
						play1val-=10;

					}

					if( (g.board[i+1][j-1].type==g.blankGame && (g.board[i-1][j+1].type!=targets[0] && g.board[i-1][j+1].type!=targets[1]) && g.board[i-1][j+1].type==enemies[1])
						|| (g.board[i+1][j+1].type==g.blankGame && (g.board[i-1][j-1].type!=targets[0] && g.board[i-1][j-1].type!=targets[1]) && g.board[i-1][j-1].type!=enemies[1])
					){
						// Write code for 2
						play1val-=10;
					}

					// Didnt understand code for 3		

				}
			}
			else if( (g.board[i][j].type!=g.blankGame) && (g.board[i][j].type!=targets[0] && g.board[i][j].type!=targets[1])){
				play2count++;
				play2val++;

				if(g.board[i][j].type==enemies[1]){
					play2val+=0.75;
				}


				if(j!=7 && j!=0 && i!=0 && i!=7){

					if( ( (g.board[i+1][j-1].type==g.blankGame) && (g.board[i-1][j+1].type==targets[0] || g.board[i-1][j+1].type==targets[1]) )
						|| ( (g.board[i+1][j+1].type==g.blankGame) && (g.board[i-1][j-1].type==targets[0] || g.board[i-1][j-1].type==targets[1]) ) ){

						// Write code for 1
						play2val-=10;

					}

					if( (g.board[i-1][j-1].type==g.blankGame && (g.board[i+1][j+1].type==targets[0] || g.board[i+1][j+1].type==targets[1]) && g.board[i+1][j+1].type==targets[1])
						|| (g.board[i-1][j+1].type==g.blankGame && (g.board[i+1][j-1].type==targets[0] ||  g.board[i+1][j-1].type==targets[1]) && g.board[i+1][j-1].type==targets[1])
					){
						// Write code for 2
						play2val-=10;
					}

					// Didnt understand code for 3					
				}
			}
		}
	}

	if(play1count>play2count){
		play2val-=50;
		play1val+=50;
	}
	else if(play2count>play1count){
		play2val+=50;
		play1val-=50;
	}

	return play1val;
-------------------------------------------------------------
(5) 
    string targets[2];
	string enemies[2];

	int back;
	if(turn==1){
		targets[0] = g.player1GameReg;
		targets[1] = g.player1GameKing;
		enemies[0] = g.player2GameReg;
		enemies[1] = g.player2GameKing;
		back=0;
	} 
	else{
		targets[0] = g.player2GameReg;
		targets[1] = g.player2GameKing;
		enemies[0] = g.player1GameReg;
		enemies[1] = g.player1GameKing;
		back=7;
	}

	int numKings = 0;
	int numReg = 0;
	int enemyReg = 0;
	int enemyKing = 0;
	int numBack = 0;

	for(int i=0;i<g.board.size();i++){
		for(int j=0;j<g.board[i].size();j++){
			if((g.board[i][j].type==targets[0] || g.board[i][j].type==targets[1]) && i==back){
				numBack++;
			}
			if(g.board[i][j].type==targets[0]){
				numReg++;
			}
			else if(g.board[i][j].type==targets[1]){
				numKings++;
			}
			else if(g.board[i][j].type==enemies[0]){
				enemyReg++;
			}
			else if(g.board[i][j].type==enemies[1]){
				enemyKing++;
			}
		}
	}

	if(numReg+numKings==0){
		return -100000;
	}
	if(enemyReg+enemyKing==0){
		return 100000;
	}

	int heur = (1800*numKings)+(1000*numReg)-(1000*enemyReg)-(1800*enemyKing)+(100*numBack);
	/*cout<<"PRINTING BOARD"<<endl;
	cout << "\033[1;31mPrinting Board\033[0m\n";
	printBoard(g);
	cout<<"HEURISTIC IS: "<<heur<<endl;
	cout<<"NUM OWN KINGS: "<<numKings<<endl;
	cout<<"NUM OWN REG: "<<numReg<<endl;
	cout<<"NUM ENEMY KINGS: "<<enemyKing<<endl;
	cout<<"NUM ENEMY REG: "<<enemyReg<<endl;*/


	return heur;